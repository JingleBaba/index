import{o as c,c as i,a as m,b as f,r as d,d as p,e as h,f as _}from"./vendor.70cdb1fa.js";const g=function(){const s=document.createElement("link").relList;if(s&&s.supports&&s.supports("modulepreload"))return;for(const e of document.querySelectorAll('link[rel="modulepreload"]'))a(e);new MutationObserver(e=>{for(const t of e)if(t.type==="childList")for(const r of t.addedNodes)r.tagName==="LINK"&&r.rel==="modulepreload"&&a(r)}).observe(document,{childList:!0,subtree:!0});function o(e){const t={};return e.integrity&&(t.integrity=e.integrity),e.referrerpolicy&&(t.referrerPolicy=e.referrerpolicy),e.crossorigin==="use-credentials"?t.credentials="include":e.crossorigin==="anonymous"?t.credentials="omit":t.credentials="same-origin",t}function a(e){if(e.ep)return;e.ep=!0;const t=o(e);fetch(e.href,t)}};g();var l=(n,s)=>{const o=n.__vccOpts||n;for(const[a,e]of s)o[a]=e;return o};const b={},x={class:"sidebar col-span-2 min-h-screen pt-12 bg-gray-50"},y=m("h2",{class:"text-xl font-medium text-slate-900 dark:text-slate-200 p-6 bg-white","data-id":"introduction"},"Introduction",-1),$=m("h2",{class:"text-xl font-medium text-slate-900 dark:text-slate-200 p-6","data-id":"introduction"},"Custom Types",-1),v=[y,$];function k(n,s,o,a,e,t){return c(),i("div",x,v)}var C=l(b,[["render",k]]);const w={},A={class:"Content min-h-screen col-span-8 p-6 pt-12"},S=f('<div id="introduction"><h2 class="text-2xl mb-4">Introduction</h2><p class="text-lg"> Prismic is a CMS system, which makes use of various pre-build elements to create the reusable components. </p><p class="text-lg"> As there is no official integration for prismic in shopify platform, we use prismic events/hooks to trigger modification or creation of page and its metafields for the integration. </p><p class="text-lg">All of these fun stuffs are taken care by backend.</p><h3 class="text-xl mt-6 underline"> Common Prismic Terminology </h3><p class="text-lg mt-8"><span class="block font-semibold">Custom Types:</span><span>Each document(pages) created through prismic should have a template. Custom Types serve as the template for these documents. </span><a class="text-green-600 underline font-semibold block mt-1"> Add a new Custom Type +</a></p><p class="text-lg mt-8"><span class="block font-semibold">Slices:</span><span>Slices serves as a component. A component is a collection of elements/placeholder grouped together. It can be shared across the custom types.</span><a class="text-green-600 underline font-semibold block mt-1"> Add a new slice +</a></p><p class="text-lg mt-8"><span class="block font-semibold">Elements:</span><span>Elements acts as a placeholder. There are predefined elements that we can use to create data placeholders.</span><a class="text-green-600 underline font-semibold block mt-1"> Add a new Elements +</a><span class="block font-semibold mt-4">We will be refering <span class="text-red-400">elements</span> as <span class="text-green-400">placeholder</span></span></p></div>',1),N=[S];function E(n,s,o,a,e,t){return c(),i("div",A,N)}var T=l(w,[["render",E]]);const L={setup(){},components:{Content:T,Sidebar:C}},O={className:"grid grid-cols-12 gap-x-10 font-poppins"};function B(n,s,o,a,e,t){const r=d("Sidebar"),u=d("Content");return c(),i("div",O,[p(r),p(u)])}var I=l(L,[["render",B]]);const P={setup(n){return(s,o)=>(c(),h(I))}};_(P).mount("#app");
